# This is a meta-makefile to create a makefile that abstracts away 
# the separation of the python files into a data producing file and a data plotting file

problem_dict = {
    "linfit": {
        "datafiles": ["linfit/data_PLAIN.dat"],
        "imgs": ["imgs/linfit/plain_plot.svg"],
        "deps": ["utils/linfit_utils.py", "utils/gradient_descent.py"]
    },
    "ffnn_regression": {
        "deps": ["utils/linfit_utils.py", "utils/gradient_descent.py", "utils/neural_network.py"]
    },
    "ffnn_classification": {
        "deps": ["utils/linfit_utils.py", "utils/gradient_descent.py", "utils/neural_network.py"]
    },
    "ffnn_logreg": {
        "deps": ["utils/linfit_utils.py", "utils/gradient_descent.py", "utils/neural_network.py"]
    },
}


def py_string(folder, datafiles, imgs, dependancies):
    return f"""
.PHONY: {folder}
{folder}: {imgs[0]}

{imgs[0]}: {folder}/{folder}_plot.py {datafiles[0]}
	mkdir -p {'/'.join(imgs[0].split('/')[:-1])}
	python3 {folder}/{folder}_plot.py

{datafiles[0]}: {folder}/{folder}_data.py {' '.join(dependancies)}
	python3 {folder}/{folder}_data.py
"""


with open("Makefile", "w") as makefile:
    makefile.write("# This file is autogenerated, do not edit\n")
    makefile.write(f"""
.PHONY: all
all: {' '.join([f for f in problem_dict.keys()])}
""")

    for f, args in problem_dict.items():
        makefile.write(py_string(
            f, args.get("datafiles", [f"{f}/data.dat"]),
            args.get("imgs", [f"imgs/{f}/plot.svg"]), args.get("deps", [])))
